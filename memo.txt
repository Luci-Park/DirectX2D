5/16

라이브러리란?
자주 사용되는 기능이나 함수 서브루틴 등등등 가르켜서 총체적으로
구현해놓은 프로젝트

lib은 링크시 필요하고 dll은 프로그램 실행시 필요하다.

동적 라이브러리(xxx.dll)
 : 프로그램 시작하고 있는 동안에 해당 라이브러리를 참조하여 실행한다.
 하나의 메모리영역에 올려두고 여러프로그램들이 나누어 사용하는 라이브러리.

//장점
- 메모리 절약 가능
- 프로그램에 한번 올려진 메모리를 공유하므로 사용공간자체가 적다.
- 패치가 정적라이브러리보다 수비게 진행 가능하다.
- 실행 중간에 패치가 가능하다.

//단점
- 프로그램의 외부의존도가 높아진다.
- 공유 라이브러리를 메모리에 올리려면 찾고 검색하는데 시간이 걸리므로 성능저하가 생긴다.

정적 라이브러리(xxx.lib)
 : 프로그램을 컴파일하는 과정에 내가 작성한 라이브러리코드들이 포함이 된다.

라이브러리 코드가 바뀌면 다시 빌도와 패치가 필요하다.

//장점
- 한번 완성되면 안정적으로 프로그램 사용이 가능하다.
- 컴파일시 필요한 라이브러리를 프로그램 내에 적재하기 때문에 앱을 안정적으로 활용할 수 있게 된다.
- 런타임시 외부를 참조할 필요가 없기 때문에 속도에서 장점이 있다.

//단점
- 라이브러리 변경시 모든 프로그램을 처음부터 다시 빌드하여 새로운 버전으로 배포를 진행해줘야 한다.

정적 라이브러리를 추가하는 방법
 	- 소스코드로 추가하는 방식
	- 비쥬얼스튜디오 옵션에 추가해서 사용하는 방식

https://blog.naver.com/PostView.nhn?isHttpsRedirect=true&blogId=wlvkddlwkd&logNo=221997200661&categoryNo=0&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=postView

후보
1) celeste -> 2D 물리엔진 개발
2) Just Shapes and Beats -> particle
3) shovel knight?

5/17
Graphics Rendering Pipeline(Rendering Pipeline)
	: 3차원 3D 모델 데이터들을 2차원인 모니터에 투영하는 프로세스
단계)
	1. vertex 데이터 처리 단계
	2. rasterizing 단계
	3. pixel/fragment 단계
	4. 출력/병합 단계

[Input Assembler]
모델 정보
	- vertex buffer = vertex info
		- vertex info = position, uv, color etc.
	- index buffer = holds index => which triangle is made up of which vertex.
 		- 그리는 순서를 알려줌 = 직선 순서
		- vertex 절약 = 메모리 절약 
	- primitive topology(DirectX3D 기준) : vertex가 이루는 도형에 대한 정보
		- ex) point list, line list, triangle strip, triangle list.
	- Input assembler(입력 조립기) : vertex buffer와 primitive topology 등을 읽어서 도형으로 조립하는 단계

[Vertex Shader]
	- 정점 정보들은 local 좌표.
	- local space -> world space -> view space -> projection space -> clip space(projection to monitor)-> viewposrt 로 변환해주는 shader.
	- 추가로 물체를 옮기거나 텍스처, 색상을 바꾸는 일도 담당한다.

5/18
[카메라 변환]
	- 가상 카메라가 보는 공간. 카메라에 상대적인 공간. 
	- view volume = Fov(시야각), aspect(종횡비)을 포함함.
	- 뷰 볼륨은 near plane, far plane에 의해 view frustrum(절두체)의 영역으로 정의 된다.
		- 절두체 = 카메라를 통해서 볼 수 있는 영역. 그 외엔 그리지 않는다.
		- plane에 걸쳐 있으면 해당 밖의 부분은 잘려진다. 이것을 clipping이라고 하며 clip space에서 전환이 이루어 진다.

[Projection(투영) 변환]
	- 원근감을 주는 단계
	- 절두체를 축을 유지한 직육면체 형태로 변경 후 모든 물체를 3차원 클립공간으로 변환하는 것.
		- 직육면체 볼륨으로 바꾸면 클리핑 작업을 쉽게 할 수 있다.
	- 3D -> 2D 가 아니라 3D 물체를 적당한 3D 물체로 바꾸는 것. 
	- 투영 변환을 거치면 절두체 뒤쪽에 있던 영역의 폴리곤이 작아지는 것이 원근감이 적용된 것.
	- vertex shader에 영향을 많이 주기 때문에 파악해두는 것이 중요하다.

[Tesselation]
	- vertex의 개수를 조절해 줄 수 있는 것.
	- 잘게 쪼개서 더 디테일하게 표현할 수도 있고, 합쳐서 최적화 성능을 올릴 수 있다.
	- Level Of Detail(LOD)이라고도 한다.
	- tesselation을 사용하면 하나의 모델에 여러 해상도의 모델 데이터를 가지고 있을 필요가 없다.

[Geometry]
	- 기본 도형에서 정점을 추가하거나 삭제하여 모델을 변경할 수 있는 셰이더. 
		- 보통 늘려줄 때 사용.
	- 게임 오브젝트를 추가해서가 아니라 셰이더 내에서 수정이 가능한 부분이라면 디스크 용량과 그래픽 메모리에 도움이 된다.
		=> 그래픽카드에게 역할 넘겨버리기
		- cpu = 교수님
		- gpu = 유치원 100 명 -> 단순 작업은 그래픽이 더 낫다. ex) particles
	- 테셀레이션 등으로 추가된 정점들을 표현할 때에도 사용된다.

[Rasterizer]
	- 처리된 정점들과 폴리곤들을 픽셀화 되는 단계.
	- 화면에 그려질 2차원 삼각형의 세 정점이 결정되면 다음과 같은 일이 일어난다.
		1. 이 삼각형이 포함하는 모든 픽셀마다 픽셀셰이더가 실행.
		2. vertex information이 interpolation(보간)되어 삼각형 내부의 각각 픽셀셰이더로 넘어온다.
	- 해당 단계는 Direct3D에서 이러한 과정들을 통틀어서 rasterization이라고 부른다. 
	- 프로그램이 불가능하고 하드웨어 자체 알고리즘을 통해 동작한다.
		- clipping
		- perspective division(원근 나눗셈)
		- backface culling(뒷면 제거)
		- viewport transform
		- ndc scan transform

[클리핑]
	클리핑 투영변환 이후의 클립공간 볼륨 밖의 폴리곤들을 잘라내는 작업.

[원근 나눗셈]
	투영변환을 마친 정점데이터는 (x, y,  z, w)에서 w성분에 z값을 저장한다. 그리고 모든 성분으로 z로 나눠서 z축을 없앤다.
	=> (x, y, z)로 바꿘다. 이를 NDC(normalize device coordinate)공간이라고 부른다.
	- 좌표의 x, y범위가 [-1 ~ 1], z는 [0 ~ 1]으로 바꾸기 때문에 정규화 공간이라고 부르는 것.
	- 비율좌표로 바꿔서 다양한 디스플레이에 대응하게 하는 것.

[뒷면 제거]
	- 외적 삼각형의 바라보고 있는 면의 방향을 구하여 뒷면일 경우에 연산에서 제외 시킨다.

[뷰포트 변환]
	- 윈도우 스크린 공간 내에 2차원 이미지가 그려질 뷰포트가 정의된다.
	- NDC 공간의 물체들을 스크린 공간으로 이전시키는 변환을 뷰포트 변환이라고 한다.

[스캔 변환]
	- 각 primitive에 대해 내부의 모든 픽셀(fragment)를 생성하는 작업. 이때 정점 데이터에 들어온 데이터들은 보간(linear interpolation)이 되어서 픽셀셰이더로 넘어간다.
	- 렌더링 프로그램에서 직접적인 영향을 미치기 때문에 매우 중요하다.

[Pixel Shader]
	- 레스터화 된 도형에 텍스쳐 매핑, 법선 매핑, 노말 매핑 기법으로 텍스쳐를 입혀서 색을 표현한다. 원한다면 특정색깔로 표현이 가능하다.
	- 조명 처리나 이미지 처리를 할 때 유용하게 사용된다.

[Output Merger]
	- 깊이 - 스텐실 테스트와 블렌딩이 일어나서 최종적인 렌더 타겟(frame buffer) 물체를 그려줍니다. 